def PiecewisePoly(Ndeg, x0, y0, x_j):
    
    y_j = f(x_j)                     # finding f(x) for the eval pts
    MM = Ndeg + 1
    N_interpolant = len(x0) - Ndeg
    pts = np.arange(Ndeg+1) + np.arange(N_interpolant).reshape(N_interpolant,1)
    
    a = np.zeros((Ndeg+1,N_interpolant))
    pows = (MM-1-np.arange(MM)).reshape(MM,1)
    
    # coefs for every interpolant
    for i in range(N_interpolant):
        A = np.vander(x0[pts[i,:]])
        a[:,i] = np.linalg.solve(A,y0[pts[i,:]])
    
    y = np.empty_like(x_j) 
    pows = Ndeg-np.arange(MM)
    
    
    for n in range(len(x_j)):
        if((x_j[n]<x0).all()):
            k=0
        elif((x_j[n]>x0).all()):
            k=len(x0)-1
        else:                # find k for x_i, accounting for the possibility that x_i=x_k
            k = np.where(((x_j[n]<x0[1:]) & (x_j[n]>=x0[:-1])) | 
                         ((x0[1:]==x_j[n]) & (x_j[n]>x0[:-1])))[0][0]
    
    
        j = k - Ndeg//2    

        j = max(0,j)
        j = min(j,N_interpolant-1)
    
        y[n] = np.sum(a[:,j]*x_j[n]**pows)  # obtain new data point
      
    return y
